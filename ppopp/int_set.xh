#ifndef _INT_SET_H
#define _INT_SET_H

#include "lvars.xh"
#include "int_set.h"

int leq_int_set_itr(IntSetItr* itr1, IntSet* set2) {
  if (intsetitr_has_next(itr1)) {
    return intset_member(set2, intsetitr_next(itr1)) 
           && leq_int_set_itr(itr1, set2);
  }
  return 1;
}

int leq_int_set(IntSet* set1, IntSet* set2) {
  if (intset_is_empty(set1)) {
    return 1;
  }
  if (intset_is_empty(set2)) {
    return 0;
  }
  IntSetItr* newitr = new_intsetitr(set1);
  int result = leq_int_set_itr(newitr, set2);
  delete_intsetitr(newitr);
  return result;
} 

Value<IntSet*>* lub_int_set(IntSet* set1, IntSet* set2) {
  if (intset_is_empty(set1)) {
    delete_intsetnode(set1->root);
    *set1 = *set2;
    free(set2);
    return value set1;
  }
  if (intset_is_empty(set2)) {
    delete_intset(set2);
    return value set1;
  }
  intset_union(set1, set2);
  delete_intset(set2);
  return value set1;
}

void display_int_set_helper(IntSetItr* itr) {
  if (intsetitr_has_next(itr)) {
    int next = intsetitr_next(itr);
    if (intsetitr_has_next(itr)) {
      printf("%d, ", next);
      display_int_set_helper(itr);
    }
    else {
      printf("%d", next);
    }
  }
}

void display_int_set(IntSet* set) {
  printf("{");
  IntSetItr* newitr = new_intsetitr(set);
  display_int_set_helper(newitr);
  delete_intsetitr(newitr);
  printf("}");
}

void put_int_set(Lvar<IntSet*>* l, int val) {
  IntSet* new = new_intset();
  intset_insert(new, val);
  put new in l; 
}

Lattice<IntSet*>* lattice_int_set() {
  return destr_lattice(leq_int_set, lub_int_set, display_int_set);
}

#endif
