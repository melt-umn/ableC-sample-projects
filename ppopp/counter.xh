#ifndef _COUNTER_XH
#define _COUNTER_XH

#include "lvars.xh"
#include "int.xh"

int leq_counter(int i1, int i2) {
  if (i1 < 0 || i2 < 0) {
    printf("Error: negative values in counter!\n");
    exit(0);
  }
  return i1 <= i2;
}

Value<int>* lub_counter(int i1, int i2) {
  if (i1 < 0 || i2 < 0) {
    printf("Error: negative values in counter!\n");
    exit(0);
  }
  return value (i1 + i2);
}

Lattice<int>* counter_lat;

Lvar<int>* make_counter() {
  if (counter_lat == NULL) {
    counter_lat = lattice_int(leq_counter, lub_counter);
  }
  return newLvar counter_lat;
}

void inc(Lvar<int>* c, int step) {
  put (step) in c;
}

ThresholdSet<int>* make_counter_threshold(int n) {
  ActivationSet<int>* a = activationSet(counter_lat, 1){n};
  return thresholdSet(counter_lat, 1){a};
}

ActivationSet<int>* get_counter(Lvar<int>* c, int n) {
  ThresholdSet<int>* t = make_counter_threshold(n);
  ActivationSet<int>* result = get c with t;
  freeSet t;
  return result;
}

#endif
